$NetBSD: patch-D8505,v 1.1 2020/05/24 01:16:26 joerg Exp $

# HG changeset patch
# User Joerg Sonnenberger <joerg@bec.de>
# Date 1588887605 -7200
#      Thu May 07 23:40:05 2020 +0200
# Branch stable
# Node ID 9d7d53771e5fa5c17bea578a89258350df6294ac
# Parent  35bb67427f63abeb02be76238ab79afbe1ded034
tests: fix timer scaling in wait-on-file

When using the default test timeouts, wait-on-file would not wait for $n
seconds, but $n/100 seconds. This resulted in easy timeouts on even
moderately busy fast machines. Fix the scaling to apply in all cases.
Adjust the stepping slightly to be nicer to systems with the historic
100Hz time base to ensure that the scheduler actually switches to a
different process and gives them time to work.

Differential Revision: https://phab.mercurial-scm.org/D8505

diff -r 35bb67427f63 -r 9d7d53771e5f tests/testlib/wait-on-file
--- tests/testlib/wait-on-file	Sat May 09 20:25:07 2020 +0200
+++ tests/testlib/wait-on-file	Thu May 07 23:40:05 2020 +0200
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/sh
 #
 # wait up to TIMEOUT seconds until a WAIT_ON_FILE is created.
 #
@@ -11,9 +11,12 @@
 
 timer="$1"
 
-# if the test timeout have been extended, explicitly extend the provided timer
+# Scale the timeout to match the sleep steps below, i.e. 1/0.02.
+timer=$(( 50 * $timer ))
+# If the test timeout have been extended, also scale the timer relative
+# to the normal timing.
 if [ "$HGTEST_TIMEOUT_DEFAULT" -lt "$HGTEST_TIMEOUT" ]; then
-    timer=$(( ( 100 * $timer * $HGTEST_TIMEOUT) / $HGTEST_TIMEOUT_DEFAULT ))
+    timer=$(( ( $timer * $HGTEST_TIMEOUT) / $HGTEST_TIMEOUT_DEFAULT ))
 fi
 
 wait_on="$2"
@@ -30,7 +33,7 @@
 while [ "$timer" -gt 0 ] && [ ! -f "$wait_on" ];
 do
     timer=$(( $timer - 1))
-    sleep 0.01
+    sleep 0.02
 done
 if [ "$timer" -le 0 ]; then
     echo "file not created after $1 seconds: $wait_on" >&2
